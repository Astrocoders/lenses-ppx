name: CI

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node_version: [10]
        os: [ubuntu-latest, macOS-latest]
    steps:
    - uses: actions/checkout@master
    - name: Use Node.js ${{ matrix.node_version }}
      uses: actions/setup-node@v1
      with:
        version: ${{ matrix.node_version }}
    - name: esy install and build
      run: |
        export OS=$(uname | tr '[A-Z]' '[a-z]')
        npm i -g esy
        cd $GITHUB_WORKSPACE/packages/ppx && esy install
        cd $GITHUB_WORKSPACE/packages/ppx && esy build
    - name: Save artifacts
      uses: actions/upload-artifact@master
      with: 
        name: ${{ matrix.os }}.exe
        path: packages/ppx/_build/default/bin/bin.exe

  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@master
      with:
        name: ubuntu-latest.exe
        path: packages/linux
    - uses: actions/download-artifact@master
      with:
        name: macOS-latest.exe
        path: packages/darwin
    - name: Use Node.js 10
      uses: actions/npm@master
      with:
        version: 10
        NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    - name: Publish
      run: |
        export PACKAGE_VERSION=$(cat $GITHUB_WORKSPACE/packages/ppx/package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
        mkdir -p $GITHUB_WORKSPACE/lenses-ppx
        mv $GITHUB_WORKSPACE/packages/darwin $GITHUB_WORKSPACE/lenses-ppx
        mv $GITHUB_WORKSPACE/packages/linux $GITHUB_WORKSPACE/lenses-ppx
        echo "{\"name\": \"lenses-ppx\", \"version\": \"$PACKAGE_VERSION\", \"postinstall\": \"mv \$(uname | tr '[A-Z]' '[a-z]') ./ppx\"}" > $GITHUB_WORKSPACE/lenses-ppx/package.json
        cd $GITHUB_WORKSPACE/lenses-ppx/ && npm publish
