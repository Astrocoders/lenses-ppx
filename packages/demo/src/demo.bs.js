// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Decco = require("decco/src/Decco.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function get(values, field) {
  if (field) {
    return values.age;
  } else {
    return values.email;
  }
}

function set(values, field, value) {
  if (field) {
    return {
            email: values.email,
            age: value
          };
  } else {
    return {
            email: value,
            age: values.age
          };
  }
}

var StateLenses = {
  get: get,
  set: set
};

console.log("fakenickels@brazil.gov.br");

console.log(0);

function bartux_get(values, field) {
  if (field) {
    return values.top;
  } else {
    return values.color;
  }
}

function bartux_set(values, field, value) {
  if (field) {
    return {
            color: values.color,
            top: value
          };
  } else {
    return {
            color: value,
            top: values.top
          };
  }
}

function bartux_encode(v) {
  return Js_dict.fromArray([
              /* tuple */[
                "color",
                Decco.stringToJson(v.color)
              ],
              /* tuple */[
                "top",
                Decco.intToJson(v.top)
              ]
            ]);
}

function bartux_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.tag !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict[0];
  var color = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "color"), null));
  if (color.tag) {
    var e = color[0];
    return /* Error */Block.__(1, [{
                path: ".color" + e.path,
                message: e.message,
                value: e.value
              }]);
  }
  var top = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "top"), null));
  if (!top.tag) {
    return /* Ok */Block.__(0, [{
                color: color[0],
                top: top[0]
              }]);
  }
  var e$1 = top[0];
  return /* Error */Block.__(1, [{
              path: ".top" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }]);
}

var bartux = {
  color: "red",
  top: 10
};

console.log("red");

console.log(bartux_set(bartux, /* Top */1, 20));

console.log(bartux_encode(bartux));

var state = {
  email: "fakenickels@brazil.gov.br",
  age: 0
};

exports.StateLenses = StateLenses;
exports.state = state;
exports.bartux_get = bartux_get;
exports.bartux_set = bartux_set;
exports.bartux_encode = bartux_encode;
exports.bartux_decode = bartux_decode;
exports.bartux = bartux;
/*  Not a pure module */
